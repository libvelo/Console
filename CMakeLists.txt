cmake_minimum_required(VERSION 3.16)

project(Console VERSION 0.0.1)

string(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPER)
string(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWER)

set(${PROJECT_NAME_UPPER}_VERSION ${PROJECT_VERSION})
set(${PROJECT_NAME_UPPER}_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(${PROJECT_NAME_UPPER}_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(${PROJECT_NAME_UPPER}_VERSION_PATCH ${PROJECT_VERSION_PATCH})

message(STATUS "${PROJECT_NAME} Version: ${${PROJECT_NAME_UPPER}_VERSION_MAJOR}.${${PROJECT_NAME_UPPER}_VERSION_MINOR}.${${PROJECT_NAME_UPPER}_VERSION_PATCH}")

option(${PROJECT_NAME_UPPER}_BUILD_EXAMPLES "Build ${PROJECT_NAME} examples" OFF)

add_library(${PROJECT_NAME} STATIC include/${PROJECT_NAME_LOWER}/console)
target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)
target_include_directories(${PROJECT_NAME}
	PUBLIC
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include> 
		$<INSTALL_INTERFACE:include/${PROJCET_NAME_LOWER}>
)

if(UNIX)
	target_sources(${PROJECT_NAME} PRIVATE src/console_linux)
elseif(WIN32)
	target_sources(${PROJECT_NAME} PRIVATE src/console_windows)
endif()

add_library(${CMAKE_PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

install(DIRECTORY include/${PROJECT_NAME_LOWER} DESTINATION include)
install(EXPORT ${PROJECT_NAME} NAMESPACE ${CMAKE_PROJECT_NAME}:: DESTINATION cmake FILE ${PROJECT_NAME}Config.cmake)
install(TARGETS ${PROJECT_NAME}
	EXPORT ${PROJECT_NAME}
	RUNTIME DESTINATION bin COMPONENT ${PROJECT_NAME}
	LIBRARY DESTINATION lib COMPONENT ${PROJECT_NAME}
	ARCHIVE DESTINATION lib COMPONENT ${PROJECT_NAME}
)

if(${PROJECT_NAME_UPPER}_BUILD_EXAMPLES)
	add_subdirectory(examples)
endif()

